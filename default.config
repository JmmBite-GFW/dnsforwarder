# DNS 转发器的配置文件
# Configure File for dnsforwarder
# 此配置文件最好是 ANSI 编码的

# LocalInterface <IP>
# 设置在本地开启的界面，可以是本地回环地址 (127.0.0.1) ，本地局域网，以及互联网 (since 2.2)
# 如果是 IPv6 地址，请在地址两端加上方括号，例如 [::1] (本地回环)、[fe80::699c:f79a:9bb6:1] (since 2.3)
LocalInterface 127.0.0.1

# LocalPort <NUM>
# 本地开启的端口 (since 2.2)
LocalPort 53

# OpenLocalTCP <BOOLEAN>
# 在本地开启TCP，以便接受TCP协议的查询 (since 2.2)
# 可选值：`false' 或 `true'
OpenLocalTCP false


# 您可以设置两组上游服务器，
# 一组是用 TCP 协议的服务器 (由 `TCPServer' 指定)，
# 另一组是用 UDP 协议的服务器 (由 `UDPServer' 指定)

# 选项 `PrimaryServer' 用来指定首选的服务器（同时也指定了协议），
# 可以是 `TCP' (用 TCP 协议的服务器) 或者 `UDP' (用 UDP 协议的服务器)
# 任何不在排除列表 (或者 GFW List) 中的域都会通过首选服务器来查询，
# 在排除列表 (或者 GFW List) 中的域会使用另一组服务器查询

# PrimaryServer 
# 首选服务器 (since 2.2)
# 可选值：`TCP' 或 `UDP'
PrimaryServer UDP

# TCPServer <IP[:PORT]>
# 指定用 TCP 协议查询的上游服务器 (since 2.2)
# 可以指定多个服务器，服务器之间用半角逗号隔开 (since 2.3)
# 如果不加端口号，则默认为 53 (since 2.3)
# 例如 192.168.1.2:300 以及 4.2.2.2 (since 2.3)
# 对于IPv6地址，请在地址两端加方括号，例如 [2001:4860:4860::8888] 以及加端口的形式 [2001:4860:4860::8888]:53 (since 2.3)
TCPServer 8.8.4.4,8.8.8.8

# UDPServer <IP[:PORT]>
# 指定用 UDP 协议查询的上游服务器 (since 2.2)
# 可以指定多个服务器，服务器之间用半角逗号隔开 (since 2.3)
# 如果不加端口号，则默认为 53 (since 2.3)
# 例如 192.168.1.2:300 以及 4.2.2.2 (since 2.3)
# 对于IPv6地址，请在地址两端加方括号，例如 [2001:4860:4860::8888] 以及加端口的形式 [2001:4860:4860::8888]:53 (since 2.3)
UDPServer 114.114.114.114,114.114.115.115 

# DomainStatistic <BOOLEAN>
# 是否启用域名统计 (since 2.3.1)
DomainStatistic true

# StatisticFlushInterval <NUM>
# 域名统计刷新时间间隔（秒） (since 2.3.1)
StatisticFlushInterval 29

# FallBackToSecondary <BOOLEAN>
# 如果首选协议及其服务器查询失败，是否再次用非首选协议及其服务器查询 (since 2.3.1)
FallBackToSecondary false

# TimeToServer <NUM>
# 与服务的的超时时间，毫秒 (since 2.2)
TimeToServer 3000

# ExcludedDomain <STRING> 
# 排除列表，每个域之间用半角逗号 (`,') 分隔，同时注意最后不要有逗号 (since 2.2)
# 支持通配符。 (since 2.2.2)
# 一个项目如果不含通配符，则从域名尾部开始匹配，例如 `123.com' 则会匹配所有以 `123.com' 结尾的域名。
# 如果含通配符则严格按照通配符来匹配。
# 可以有多条ExcludedDomain (since 2.2.2)
ExcludedDomain 

# GfwList <STRING>
# 加载 GFW List (since 2.2.3)
# GFW List 中的域名将被添加到排除列表
# 只有当 `PrimaryServer' 的值为 `UDP' 才会加载 GFW List (否则排除掉全用 UDP 了)
# 如果保留为空，则不载入 GFW List
GfwList https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt

# GfwListBase64Decode <BOOLEAN>
# GFW List 是否需要 Base64 解码
GfwListBase64Decode true

# GfwListFlushTime <NUM>
# 重新载入 GFW List 的间隔时间，秒 (since 2.2.4)
# -1 表示不重新载入
# 如果保留为空。则使用默认值 (7200)
GfwListFlushTime 7200

# GfwListFlushTimeOnFailed <NUM>
# 当下载 GFW List 失败后的重试时间，秒 (since 2.2.4)
# 如果保留为空，则使用默认值 (30)
GfwListFlushTimeOnFailed 30

# GfwListDownloadPath <STRING>
# GFW List 下载到本地文件的路径 (since 2.3)
# 如果保留为空，则默认在与程序所在相同的文件夹内
GfwListDownloadPath 

# UDPThreads <NUM>
# 在本地进行 UDP 监听的线程数 (since 2.2)
UDPThreads 3

# DisabledType <STRING>
# 禁止查询的 DNS 类型列表，每个类型之间用半角逗号 (`,') 分隔 (since 2.2)
# 所有的 DNS 类型：
# A	      1   IPv4 地址
# AAAA       28   IPv6 地址
# APL        42
# CERT       37
# CNAME       5
# DHCID      49
# DLV     32769
# DNAME      39
# DNSKEY     48
# DS	     43
# HIP        55
# IPSECKEY   45
# KEY        25
# KX	     36
# LOC        29
# MX	     15
# NAPTR      35
# NS	      2   Name Server
# NSEC       47
# NSEC3      50
# NSEC3PARAM 51
# PTR        12   Domain pointer
# RRSIG      46
# RP	     17
# SIG        24
# SOA         6   start of authority record
# SPF        99
# SRV        33
# SSHFP      44
# TA	  32768
# TKEY      249
# TSIG      250
# TXT        16
# ANY       255
# AXFR      252
# IXFR      251
# OPT        41
DisabledType 

# DisabledDomain <STRING>
# 禁止查询的域列表，每个域之间用半角逗号 (`,') 分隔 (since 2.2)
# 支持通配符。 (since 2.2.2)
# 一个项目如果不含通配符，则从域名尾部开始匹配，例如 `123.com' 则会匹配所有以 `123.com' 结尾的域名。
# 如果含通配符则严格按照通配符来匹配。
# 可以有多条DisabledDomain (since 2.2.2)
DisabledDomain 

# UseCache <BOOLEAN>
# 是否使用缓存 (文件缓存) (since 2.2)
# 可选值：`false' 或 `true'
UseCache true

# CacheSize <NUM>
# 缓存大小 (字节)
# 缓存大小不能小于 102400 (100KB) (since 2.3)
CacheSize 1048576

# MemeryCache <BOOLEAN>
# 是否使用内存缓存 (since 2.3.2)
MemeryCache true

# CacheFile <STRING>
# 手工指定缓存文件 (不是文件夹) (since 2.3)
# 如果保留为空，则默认在与程序所在相同的文件夹内
# 如果 `MemeryCache' 为 `true'，此选项无效
CacheFile 

# IgnoreTTL <BOOLEAN>
# 是否忽略 TTL (since 2.2)
# 可选值：`false' 或 `true'
# 为 `true' 时将忽略 TTL，此时所有的缓存条目将不会被移除
# 为 `false' 时不忽略 TTL，缓存条目将会按照 TTL 的时间来移除
# 当 `UseCache' 的值为 `false' 时，此选项无效
IgnoreTTL false

# ForceTTL <NUM>
# 强制使所有缓存的条目的 TTL 为 <NUM> (since 2.2)
# 若 <NUM> 为 -1，则表示不进行强制
# 当 `UseCache' 的值为 `false' 时，此选项无效
# 当 `IgnoreTTL' 的值为 `true' 时，此选项无效
ForceTTL -1

# MultipleTTL <NUM>
# 将所有缓存条目的 TTL 加倍，倍数为 <NUM> (since 2.2)
# 当 `UseCache' 的值为 `false' 时，此选项无效
# 当 `IgnoreTTL' 的值为 `true' 时，此选项无效
# 当 `ForceTTL' 的值不为 -1 时，此选项无效
MultipleTTL 3

# ReloadCache <BOOLEAN>
# 是否重新载入已有缓存 (since 2.2.3)
# 已有的缓存大小必须和 `CacheSize' 所指定的大小相等
# 可选值：`false' 或 `true'
ReloadCache false

# OverwriteCache <BOOLEAN>
# 如果已有缓存无法重载，是否直接将其覆盖掉 (since 2.3)
# 可选值：`false' 或 `true'
# 如果 `ReloadCache' 的值为 `false'，此选项无效
OverwriteCache false

# Hosts <STRING>
# Hosts 文件路径 (绝对路径)，可以是本地 Hosts 文件，也可以是网络上的 Hosts 文件 (以 http:// 或者 https:// 开头)。 (since 2.2)
# 例如 C:\Windows\System32\drivers\etc\hosts 或 /etc/hosts 或 http://xxx.com/hosts
# 支持通配符 (`*' 和 `?') (只能在域名中出现通配符)
# 路径两头不要加引号
# Hosts 文件必须是原始格式，不能是压缩文件或者 HTML 文件
# Hosts 文件最好是 ANSI 编码的
# Hosts 中的 IPv6 地址不用加方括号
# 如果保留为空，则不从文件载入 Hosts
Hosts 

# HostsFlushTime <NUM>
# 重新载入 Hosts 文件的间隔时间，秒 (since 2.2)
# -1 表示不重新载入
# 如果保留为空，则使用默认值 (600)
HostsFlushTime 1800

# HostsDownloadPath <STRING>
# 当 Hosts 为网络 Hosts 时，Hosts 文件的下载到本地文件的路径 (不是文件夹路径) (since 2.2)
# 例如 C:\Windows\Temp\hosts 或者 /tmp/hosts
# 绝对路径，路径两头不要加引号
# 如果文件存在则覆盖
# 对本地 Hosts 文件此选项无效
# 如果保留为空，则使用默认路径 (默认在与程序所在相同的文件夹内 (since 2.3) )
HostsDownloadPath 

# HostsScript <STRING>
# 当 Hosts 为网络 Hosts 时，在每次下载完 Hosts 文件后、加载 Hosts 文件之前执行的脚本 (since 2.2)
# 绝对路径，路径两头不要加引号
# 对本地 Hosts 文件此选项无效
# 如果保留为空，则不执行脚本
HostsScript 

# HostsFlushTimeOnFailed <NUM>
# 当网络 Hosts 下载失败后的重试时间，秒 (since 2.2.2)
# 仅对网络 Hosts 有效
# 如果保留为空，则使用默认值 (30)
HostsFlushTimeOnFailed 30

# AppendHosts <HOSTS>,<HOSTS>,<HOSTS>,...
# 附加的 Hosts，即使 `Hosts' 选项为空也照样载入 (since 2.2.2)
# <HOSTS>的写法与文件中的一样，同样支持通配符
# IPv6 地址不用加方括号
# 多条 Hosts 可以用半角逗号分隔开，也可以写多条 `AppendHosts'
# 比如可以写成:
#  AppendHosts 127.0.0.1 123.com,127.0.0.1 456.com,1.2.3.4 foobar.*
# 也可以分多条写:
#  AppendHosts 127.0.0.1 123.com
#  AppendHosts 127.0.0.1 456.com
#  AppendHosts 1.2.3.4 foobar.*
# 也可以定义 CName 的 Hosts 项，例如：
#  AppendHosts www.google.cn *.google.com
# 这样所有匹配 *.google.com 的域名都将指向 www.google.cn 的 IP 地址 (since 2.3)
AppendHosts 